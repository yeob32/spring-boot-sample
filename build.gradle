plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.0'
    id 'org.jetbrains.kotlin.kapt' version '1.8.0'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.8.0'
    id "org.jetbrains.kotlin.plugin.allopen" version '1.8.0'
    id "org.jetbrains.kotlin.plugin.noarg" version '1.8.0'
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.allopen'
    apply plugin: 'org.jetbrains.kotlin.plugin.noarg'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'org.jetbrains.kotlin.kapt'

    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_11

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        implementation("org.jetbrains.kotlin:kotlin-reflect")
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        implementation("com.fasterxml.jackson.module:jackson-module-kotlin")

        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    allOpen {
        annotation("javax.persistence.Entity")
        annotation("javax.persistence.Embeddable")
        annotation("javax.persistence.MappedSuperclass")
    }

    noArg {
        annotation("javax.persistence.Entity")
        annotation("javax.persistence.Embeddable")
        annotation("javax.persistence.MappedSuperclass")
    }

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    test {
        useJUnitPlatform()
    }

    // 해당 task로 서브 모듈 추가시 기초적인 디렉토리 자동 생성
    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
//                it.mkdirs() // kotlin 혼용하면서 고민 중..
            }
        }

        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
    }
}

project(':spring-boot-initialize')
project(':spring-boot-configuration')
project(':spring-rabbitmq')
project(':spring-mockito')
project(':spring-boot-batch')
project(':spring-boot-scheduler')
project(':spring-boot-security')
project(':spring-boot-security-jwt')
project(':spring-boot-security-jwt-auth')
project(':spring-boot-security-oauth2')
project(':spring-boot-swagger')
project(':spring-boot-rest-docs')
project(':spring-boot-async')
project(':spring-boot-redis')
project(':spring-boot-mvc')
project(':spring-boot-mysql')
project(':spring-boot-logger')
project(':spring-boot-monitor')
project(':spring-boot-kafka')
project(':spring-webflux')
project(':spring-boot-circuitbreaker')
project(':spring-boot-distributed-lock')
